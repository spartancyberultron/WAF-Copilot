"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  SortingState,
  useReactTable,
  VisibilityState,
} from "@tanstack/react-table"
import {
  IconChevronDown,
  IconChevronLeft,
  IconChevronRight,
  IconChevronsLeft,
  IconChevronsRight,
  IconDotsVertical,
  IconLayoutColumns,
  IconExternalLink,
  IconAlertTriangle,
} from "@tabler/icons-react"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import mermaid from "mermaid"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { z } from "zod"
import { 
  Drawer, 
  DrawerTrigger, 
  DrawerContent, 
  DrawerHeader, 
  DrawerTitle, 
  DrawerDescription, 
  DrawerFooter, 
  DrawerClose 
} from "@/components/ui/drawer"
import { Separator } from "@/components/ui/separator"
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { AreaChart, Area, CartesianGrid, XAxis } from "recharts"
import { IconTrendingUp, IconCopy, IconCheck, IconCircle, IconCircleCheck } from "@tabler/icons-react"
import { useIsMobile } from "@/hooks/use-mobile"
import { useAuth } from "@/hooks/use-auth"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "./ui/textarea"

import { ScrollArea } from "./ui/scroll-area"
import { Mermaid } from "./Mermaid"

// CVE Data Schema
export const cveSchema = z.object({
  id: z.string(),
  description: z.string(),
  dependency_name: z.string(),
  cvss_v3_score: z.number().nullable(),
  cvss_v3_vector: z.string().nullable(),
  cvss_v2_score: z.number().nullable(),
  cvss_v2_vector: z.string().nullable(),
  published_date: z.string(),
  last_modified_date: z.string(),
  references: z.array(z.string()),
  threat_feed: z.string(),
  status: z.enum(['not_started', 'started', 'in_progress', 'closed']).default('not_started'),
})

export type CVE = z.infer<typeof cveSchema>

type CVEWithClick = CVE & {
  onCVEClick?: (cve: CVE) => void
}

// Function to get severity color based on CVSS score
function getSeverityColor(score: number | null): string {
  if (!score) return "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
  if (score >= 9.0) return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
  if (score >= 7.0) return "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200"
  if (score >= 4.0) return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
  return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
}

// Function to get severity label
function getSeverityLabel(score: number | null): string {
  if (!score) return "Unknown"
  if (score >= 9.0) return "Critical"
  if (score >= 7.0) return "High"
  if (score >= 4.0) return "Medium"
  return "Low"
}

// Function to get status color and variant
function getStatusStyle(status: string) {
  switch (status) {
    case 'not_started':
      return { variant: 'secondary' as const, className: 'bg-stone-50 text-stone-300 hover:bg-stone-100' }
    case 'started':
      return { variant: 'secondary' as const, className: 'bg-stone-50 text-stone-300 hover:bg-stone-100' }
    case 'in_progress':
      return { variant: 'secondary' as const, className: 'bg-stone-50 text-stone-300 hover:bg-stone-100' }
    case 'closed':
      return { variant: 'default' as const, className: 'bg-stone-50 text-stone-300 hover:bg-stone-100' }
    default:
      return { variant: 'secondary' as const, className: 'bg-stone-50 text-stone-300 hover:bg-stone-100' }
  }
}

// Move columns definition inside the component

export function CVEDataTable({
  data: initialData,
}: {
  data: CVE[]
}) {

  const [data, setData] = React.useState(() => 
    initialData.map(cve => ({ ...cve }))
  )

  const { makeAuthenticatedRequest } = useAuth()

  const handleUpdateStatus = async (cve: CVE, newStatus: string) => {
    try {
      const response = await makeAuthenticatedRequest('http://localhost:8000/api/user/cves/update-status/', {
        method: 'POST',
        body: JSON.stringify({
          cve_id: cve.id,
          status: newStatus,
        }),
      })

      if (response.ok) {
        const result = await response.json()
        // Update the local state to reflect the change
        setData(prevData => 
          prevData.map(item => 
            item.id === cve.id 
              ? { ...item, status: result.status }
              : item
          )
        )
      } else {
        console.error('Failed to update status')
      }
    } catch (error) {
      console.error('Error updating status:', error)
    }
  }

  const columns: ColumnDef<CVE>[] = [
    {
      id: "select",
      header: ({ table }) => (
        <div className="flex items-center justify-center">
          <Checkbox
            checked={
              table.getIsAllPageRowsSelected() ||
              (table.getIsSomePageRowsSelected() && "indeterminate")
            }
            onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
            aria-label="Select all"
          />
        </div>
      ),
      cell: ({ row }) => (
        <div className="flex items-center justify-center">
          <Checkbox
            checked={row.getIsSelected()}
            onCheckedChange={(value) => row.toggleSelected(!!value)}
            aria-label="Select row"
          />
        </div>
      ),
      enableSorting: false,
      enableHiding: false,
    },
    {
      accessorKey: "id",
      header: "CVE ID",
             cell: ({ row }) => (
         <TableCellViewer item={row.original} onUpdateStatus={handleUpdateStatus} />
       ),
      enableHiding: false,
    },
    {
      accessorKey: "dependency_name",
      header: "Dependency",
      cell: ({ row }) => (
        <div className="font-medium">
          <Badge variant="outline" className="text-xs">
            {row.original.dependency_name}
          </Badge>
        </div>
      ),
    },
    {
      accessorKey: "threat_feed",
      header: "Threat Feed",
      cell: ({ row }) => (
        <div className="font-medium">
          <Badge variant="secondary" className="text-xs">
            {row.original.threat_feed}
          </Badge>
        </div>
      ),
    },
    {
      accessorKey: "description",
      header: "Description",
      cell: ({ row }) => (
        <div className="max-w-md truncate" title={row.original.description}>
          {row.original.description}
        </div>
      ),
      enableHiding: false,
    },
    {
      accessorKey: "cvss_v3_score",
      header: "CVSS v3 Score",
      cell: ({ row }) => {
        const score = row.original.cvss_v3_score
        const severity = getSeverityLabel(score)
        const colorClass = getSeverityColor(score)
        
        return (
          <div className="flex items-center gap-2">
            {score ? (
              <>
                <Badge className={colorClass}>
                  {score}
                </Badge>
                <span className="text-sm text-muted-foreground">{severity}</span>
              </>
            ) : (
              <Badge variant="outline" className="text-muted-foreground">
                <IconAlertTriangle className="mr-1 h-3 w-3" />
                No Score
              </Badge>
            )}
          </div>
        )
      },
    },
    {
      accessorKey: "published_date",
      header: "Published Date",
      cell: ({ row }) => (
        <div className="text-sm">
          {new Date(row.original.published_date).toLocaleDateString()}
        </div>
      ),
    },
    {
      accessorKey: "references",
      header: "References",
      cell: ({ row }) => (
        <div className="flex items-center gap-1">
          <Badge variant="outline" className="text-xs">
            {row.original.references.length} links
          </Badge>
          {row.original.references.length > 0 && (
            <Button
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0 cursor-pointer"
              onClick={() => window.open(row.original.references[0], '_blank')}
            >
              <IconExternalLink className="h-3 w-3" />
            </Button>
          )}
        </div>
      ),
    },
         {
       accessorKey: "status",
       header: "Status",
       cell: ({ row }) => {
         const statusStyle = getStatusStyle(row.original.status)
         return (
           <div className="flex items-center gap-2">
             <Select 
               value={row.original.status} 
               onValueChange={(newStatus) => handleUpdateStatus(row.original, newStatus)}
             >
                               <SelectTrigger className={`w-28 h-7 text-xs cursor-pointer ${statusStyle.className}`}>
                  <SelectValue />
                </SelectTrigger>
               <SelectContent>
                 <SelectItem value="not_started">Not Started</SelectItem>
                 <SelectItem value="started">Started</SelectItem>
                 <SelectItem value="in_progress">In Progress</SelectItem>
                 <SelectItem value="closed">Closed</SelectItem>
               </SelectContent>
             </Select>
           </div>
         )
       },
     },
    
  ]

  const [rowSelection, setRowSelection] = React.useState({})
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({})
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [pagination, setPagination] = React.useState({
    pageIndex: 0,
    pageSize: 10,
  })

  const table = useReactTable({
    data: data as CVEWithClick[],
    columns,
    state: {
      sorting,
      columnVisibility,
      rowSelection,
      columnFilters,
      pagination,
    },
    getRowId: (row) => row.id,
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibility,
    onPaginationChange: setPagination,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
  })

  return (
    <div className="w-full items-center">
      <div className="flex items-center justify-between py-4">
                 <div className="flex items-center gap-4">
           <div className="flex items-center gap-2 ml-4">
             <h2 className="text-lg font-semibold">Dependency CVE Vulnerabilities</h2>
           </div>
           <Badge variant="secondary">
             {data.length} dependency vulnerabilities
           </Badge>
         </div>
         <div className="flex items-center gap-4 ml-4">
           <div className="flex items-center gap-2">
             <Badge variant="outline" className="bg-gray-100 text-gray-800">
               Not Started: {data.filter(cve => cve.status === 'not_started').length}
             </Badge>
             <Badge variant="outline" className="bg-blue-100 text-blue-800">
               Started: {data.filter(cve => cve.status === 'started').length}
             </Badge>
             <Badge variant="outline" className="bg-yellow-100 text-yellow-800">
               In Progress: {data.filter(cve => cve.status === 'in_progress').length}
             </Badge>
             <Badge variant="outline" className="bg-green-100 text-green-800">
               Closed: {data.filter(cve => cve.status === 'closed').length}
             </Badge>
           </div>
         </div>
                 <div className="flex items-center gap-2">
           <Input
             placeholder="Filter CVEs..."
             value={(table.getColumn("id")?.getFilterValue() as string) ?? ""}
             onChange={(event) =>
               table.getColumn("id")?.setFilterValue(event.target.value)
             }
             className="max-w-sm"
           />
                       <Select
              value={(table.getColumn("status")?.getFilterValue() as string) ?? "all"}
              onValueChange={(value) => {
                if (value === "all") {
                  table.getColumn("status")?.setFilterValue(undefined)
                } else {
                  table.getColumn("status")?.setFilterValue(value)
                }
              }}
            >
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="not_started">Not Started</SelectItem>
                <SelectItem value="started">Started</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="closed">Closed</SelectItem>
              </SelectContent>
            </Select>
           <DropdownMenu>
             <DropdownMenuTrigger asChild>
               <Button variant="outline" size="sm" className="cursor-pointer">
                 <IconLayoutColumns />
                 <span className="hidden lg:inline">Columns</span>
                 <IconChevronDown />
               </Button>
             </DropdownMenuTrigger>
             <DropdownMenuContent align="end" className="w-56">
               {table
                 .getAllColumns()
                 .filter(
                   (column) =>
                     typeof column.accessorFn !== "undefined" &&
                     column.getCanHide()
                 )
                 .map((column) => {
                   return (
                     <DropdownMenuCheckboxItem
                       key={column.id}
                       className="capitalize"
                       checked={column.getIsVisible()}
                       onCheckedChange={(value) =>
                         column.toggleVisibility(!!value)
                       }
                     >
                       {column.id}
                     </DropdownMenuCheckboxItem>
                   )
                 })}
             </DropdownMenuContent>
           </DropdownMenu>
         </div>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id} colSpan={header.colSpan}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  )
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={`${cell.id}_${row.id}`}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No CVEs found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-between px-2 py-4">
        <div className="text-muted-foreground flex-1 text-sm">
          {table.getFilteredSelectedRowModel().rows.length} of{" "}
          {table.getFilteredRowModel().rows.length} row(s) selected.
        </div>
        <div className="flex items-center gap-6">
          <div className="flex items-center gap-2">
            <Label htmlFor="rows-per-page" className="text-sm font-medium">
              Rows per page
            </Label>
            <Select
              value={`${table.getState().pagination.pageSize}`}
              onValueChange={(value) => {
                table.setPageSize(Number(value))
              }}
            >
              <SelectTrigger size="sm" className="w-20" id="rows-per-page">
                <SelectValue
                  placeholder={table.getState().pagination.pageSize}
                />
              </SelectTrigger>
              <SelectContent side="top">
                {[10, 20, 30, 40, 50].map((pageSize) => (
                  <SelectItem key={pageSize} value={`${pageSize}`}>
                    {pageSize}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="flex w-fit items-center justify-center text-sm font-medium">
            Page {table.getState().pagination.pageIndex + 1} of{" "}
            {table.getPageCount()}
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              className="hidden h-8 w-8 p-0 lg:flex cursor-pointer"
              onClick={() => table.setPageIndex(0)}
              disabled={!table.getCanPreviousPage()}
            >
              <span className="sr-only">Go to first page</span>
              <IconChevronsLeft />
            </Button>
            <Button
              variant="outline"
              className="size-8 cursor-pointer"
              size="icon"
              onClick={() => table.previousPage()}
              disabled={!table.getCanPreviousPage()}
            >
              <span className="sr-only">Go to previous page</span>
              <IconChevronLeft />
            </Button>
            <Button
              variant="outline"
              className="size-8 cursor-pointer"
              size="icon"
              onClick={() => table.nextPage()}
              disabled={!table.getCanNextPage()}
            >
              <span className="sr-only">Go to next page</span>
              <IconChevronRight />
            </Button>
            <Button
              variant="outline"
              className="hidden size-8 lg:flex cursor-pointer"
              size="icon"
              onClick={() => table.setPageIndex(table.getPageCount() - 1)}
              disabled={!table.getCanNextPage()}
            >
              <span className="sr-only">Go to last page</span>
              <IconChevronsRight />
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
} 
function TableCellViewer({ item, onUpdateStatus }: { item: CVE; onUpdateStatus: (cve: CVE, newStatus: string) => void }) {
  const isMobile = useIsMobile()
  const { makeAuthenticatedRequest } = useAuth()
  const [isLoading, setIsLoading] = React.useState(false)
  const [isOpen, setIsOpen] = React.useState(false)
  const [wafType, setWafType] = React.useState("azure")
  const [ruleFormat, setRuleFormat] = React.useState("json")
  const [copied, setCopied] = React.useState(false)
  const [explanation, setExplanation] = React.useState<{ explanation: string; mermaid: string } | null>(null)
  const [explanationLoading, setExplanationLoading] = React.useState(false)
  const [showGeneratedRule, setShowGeneratedRule] = React.useState(false)
  const [wafRuleLoading, setWafRuleLoading] = React.useState(false)
  const [generatedRule, setGeneratedRule] = React.useState<string>("")
  const [testingCodeLoading, setTestingCodeLoading] = React.useState(false)
  const [showGeneratedTestingCode, setShowGeneratedTestingCode] = React.useState(false)
  const [generatedTestingCode, setGeneratedTestingCode] = React.useState<string>("")
  const [testingCodeCopied, setTestingCodeCopied] = React.useState(false)

  // Initialize Mermaid
  React.useEffect(() => {
    mermaid.initialize({
      startOnLoad: true,
      theme: 'dark',
      securityLevel: 'loose',
    })
  },[])

  // Fetch CVE explanation when drawer opens
  const fetchCVEExplanation = React.useCallback(async () => {
    setExplanationLoading(true)
    try {
      const response = await makeAuthenticatedRequest('http://localhost:8000/api/cve-explanation/', {
        method: 'POST',
        body: JSON.stringify({
          cve_id: item.id,
          description: item.description,
          severity: getSeverityLabel(item.cvss_v3_score || 0),
        }),
      })

      if (response.ok) {
        const data = await response.json()
        // Add a small delay to make the loading state visible
        await new Promise(resolve => setTimeout(resolve, 500))
        setExplanation(data)
        // Mermaid component will handle its own loading state
      } else {
        console.error('Failed to fetch CVE explanation')
      }
    } catch (error) {
      console.error('Error fetching CVE explanation:', error)
    } finally {
      setExplanationLoading(false)
    }
  }, [item.id, item.description, item.cvss_v3_score, makeAuthenticatedRequest])

  // Remove the renderMermaidDiagram function since Mermaid component handles its own rendering

  

  const handleGenerateWafRule = async () => {
    setWafRuleLoading(true)
    try {
      // Make actual API call to generate WAF rule
      const response = await makeAuthenticatedRequest('http://localhost:8000/api/waf-rule/', {
        method: 'POST',
        body: JSON.stringify({
          cve_id: item.id,
          description: item.description,
          severity: getSeverityLabel(item.cvss_v3_score || 0),
          mode: ruleFormat,
          waf: wafType
        })
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success && data.waf_rule) {
          console.log(`Generated ${ruleFormat.toUpperCase()} rule for ${wafType.toUpperCase()} WAF:`, data.waf_rule)
          setShowGeneratedRule(true)
          // Store the generated rule for copying
          setGeneratedRule(data.waf_rule)
        } else {
          console.error('Failed to generate WAF rule:', data.error)
          setShowGeneratedRule(false)
        }
      } else {
        console.error('Failed to generate WAF rule:', response.status)
        setShowGeneratedRule(false)
      }
    } catch (error) {
      console.error('Error generating WAF rule:', error)
      setShowGeneratedRule(false)
    } finally {
      setWafRuleLoading(false)
    }
  }

  const handleCopyToClipboard = async () => {
    if (!generatedRule) return
    
    try {
      await navigator.clipboard.writeText(generatedRule)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error('Failed to copy to clipboard:', err)
    }
  }

  const handleGenerateTestingCode = async () => {
    setTestingCodeLoading(true)
    try {
      // Make actual API call to generate testing code
      const response = await makeAuthenticatedRequest('http://localhost:8000/api/generate-testing-code/', {
        method: 'POST',
        body: JSON.stringify({
          cve_id: item.id,
          description: item.description,
          severity: getSeverityLabel(item.cvss_v3_score || 0)
        })
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success && data.python_code) {
          console.log(`Generated testing code for CVE ${item.id}:`, data.python_code)
          setShowGeneratedTestingCode(true)
          setGeneratedTestingCode(data.python_code)
        } else {
          console.error('Failed to generate testing code:', data.error)
          setShowGeneratedTestingCode(false)
        }
      } else {
        console.error('Failed to generate testing code:', response.status)
        setShowGeneratedTestingCode(false)
      }
    } catch (error) {
      console.error('Error generating testing code:', error)
      setShowGeneratedTestingCode(false)
    } finally {
      setTestingCodeLoading(false)
    }
  }

  const handleCopyTestingCodeToClipboard = async () => {
    if (!generatedTestingCode) return
    
    try {
      await navigator.clipboard.writeText(generatedTestingCode)
      setTestingCodeCopied(true)
      setTimeout(() => setTestingCodeCopied(false), 2000)
    } catch (err) {
      console.error('Failed to copy testing code to clipboard:', err)
    }
  }

  return (
    <Drawer 
      direction={isMobile ? "bottom" : "left"} 
      open={isOpen}
      onOpenChange={(open) => {
        setIsOpen(open)
        if (open) {
          // handleDrawerOpen()
          fetchCVEExplanation()
          // Don't reset mermaid loading state here - let it be managed by the render function
        }
      }}
    >
      <DrawerTrigger asChild>
        <Button variant="link" className="text-foreground w-fit px-0 text-left cursor-pointer">
          {item.id}
        </Button>
      </DrawerTrigger>
      <DrawerContent className=" data-[vaul-drawer-direction=left]:sm:w-3xl data-[vaul-drawer-direction=left]:sm:max-w-full px-8">
        <DrawerHeader className="gap-1">
          <DrawerTitle>{item.id}</DrawerTitle>
          <DrawerDescription>
            CVE Details and Information
          </DrawerDescription>
        </DrawerHeader>
        <ScrollArea className="flex flex-col gap-4 px-4 text-sm h-[calc(100vh-10rem)]">
          {isLoading ? (
            <div className="flex flex-col gap-4">
              <div className="flex items-center justify-center py-8">
                <div className="flex flex-col items-center gap-2">
                  <div className="h-8 w-8 animate-spin rounded-full border-2 border-stone-300 border-t-stone-600"></div>
                  <p className="text-sm text-muted-foreground">Loading CVE details...</p>
                </div>
              </div>
            </div>
          ) : (
            <Tabs defaultValue="general" className="w-fit">
              <TabsList className="flex flex-row min-w-lg max-w-[80%] gap-3 items-center">
                <TabsTrigger value="general" className="cursor-pointer">General</TabsTrigger>
                <TabsTrigger value="remediation" className="cursor-pointer">Remediation</TabsTrigger>
                <TabsTrigger value="testing" className="cursor-pointer">Testing</TabsTrigger>
              </TabsList>
              <TabsContent value="general" className="space-y-4">
                <div className="grid gap-4">
                                     <div className="flex items-center justify-between py-2 pr-2 pl-4 bg-muted/50 rounded-lg border">
                     <div className="flex items-center gap-3">
                       <div className="flex items-center gap-2">
                         <span className="text-sm font-medium text-muted-foreground">Status:</span>
                         <Select 
                           value={item.status} 
                           onValueChange={(newStatus) => onUpdateStatus(item, newStatus)}
                         >
                           <SelectTrigger className="w-40">
                             <SelectValue />
                           </SelectTrigger>
                           <SelectContent>
                             <SelectItem value="not_started">Not Started</SelectItem>
                             <SelectItem value="started">Started</SelectItem>
                             <SelectItem value="in_progress">In Progress</SelectItem>
                             <SelectItem value="closed">Closed</SelectItem>
                           </SelectContent>
                         </Select>
                       </div>
                     </div>
                     <div className="text-sm text-muted-foreground">
                       Current: {item.status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                     </div>
                   </div>
                   <div className="flex items-center gap-2 mt-2">
                     <span className="text-xs text-muted-foreground">Quick Actions:</span>
                     <div className="flex gap-1">
                       <Button
                         variant="outline"
                         size="sm"
                         className="h-6 px-2 text-xs"
                         onClick={() => onUpdateStatus(item, 'started')}
                         disabled={item.status === 'started'}
                       >
                         Mark Started
                       </Button>
                       <Button
                         variant="outline"
                         size="sm"
                         className="h-6 px-2 text-xs"
                         onClick={() => onUpdateStatus(item, 'in_progress')}
                         disabled={item.status === 'in_progress'}
                       >
                         Mark In Progress
                       </Button>
                       <Button
                         variant="outline"
                         size="sm"
                         className="h-6 px-2 text-xs"
                         onClick={() => onUpdateStatus(item, 'closed')}
                         disabled={item.status === 'closed'}
                       >
                         Mark Closed
                       </Button>
                     </div>
                   </div>
                  <div className="flex flex-col gap-2">
                    <Label className="font-semibold">Dependency</Label>
                    <Badge variant="outline">{item.dependency_name}</Badge>
                  </div>
                  <div className="flex flex-col gap-2">
                    <Label className="font-semibold">Description</Label>
                    <p className="text-muted-foreground">{item.description}</p>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="flex flex-col gap-2">
                      <Label className="font-semibold">CVSS v3 Score</Label>
                      {item.cvss_v3_score ? (
                        <Badge className={getSeverityColor(item.cvss_v3_score)}>
                          {item.cvss_v3_score} - {getSeverityLabel(item.cvss_v3_score)}
                        </Badge>
                      ) : (
                        <Badge variant="outline">No Score</Badge>
                      )}
                    </div>
                    <div className="flex flex-col gap-2">
                      <Label className="font-semibold">CVSS v2 Score</Label>
                      {item.cvss_v2_score ? (
                        <Badge className={getSeverityColor(item.cvss_v2_score)}>
                          {item.cvss_v2_score} - {getSeverityLabel(item.cvss_v2_score)}
                        </Badge>
                      ) : (
                        <Badge variant="outline">No Score</Badge>
                      )}
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="flex flex-col gap-2">
                      <Label className="font-semibold">Published Date</Label>
                      <p className="text-muted-foreground">
                        {new Date(item.published_date).toLocaleDateString()}
                      </p>
                    </div>
                    <div className="flex flex-col gap-2">
                      <Label className="font-semibold">Last Modified</Label>
                      <p className="text-muted-foreground">
                        {new Date(item.last_modified_date).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  {item.references.length > 0 && (
                    <div className="flex flex-col gap-2">
                      <Label className="font-semibold">References</Label>
                      <div className="flex flex-col gap-1 w-fit">
                        {item.references.map((ref, index) => (
                          <Button
                            key={index}
                            variant="outline"
                            size="sm"
                            className="justify-start cursor-pointer"
                            onClick={() => window.open(ref, '_blank')}
                          >
                            <IconExternalLink className="mr-2 h-3 w-3" />
                            {ref}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  <Separator />
                  
                  <div className="flex flex-col gap-2">
                    <Label className="font-semibold">CVE Explanation</Label>
                    {explanationLoading ? (
                      <div className="flex items-center justify-center py-4">
                        <div className="flex flex-col items-center gap-2">
                          <div className="h-6 w-6 animate-spin rounded-full border-2 border-stone-300 border-t-stone-600"></div>
                          <p className="text-sm text-muted-foreground">Generating explanation...</p>
                        </div>
                      </div>
                    ) : explanation ? (
                      <div className="space-y-4">
                        <p className="text-muted-foreground leading-relaxed">
                          {explanation.explanation}
                        </p>
                        
                        <div>
                          <Label className="font-semibold">CVE Flow Diagram</Label>
                          {explanation.mermaid ? (
                            <Mermaid className="mt-4" text={explanation.mermaid} />
                          ) : (
                            <div className="flex items-center justify-center py-8 border rounded-lg">
                              <div className="flex flex-col items-center gap-2">
                                <div className="h-6 w-6 animate-spin rounded-full border-2 border-stone-300 border-t-stone-600"></div>
                                <p className="text-sm text-muted-foreground">Rendering diagram...</p>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    ) : (
                      <p className="text-muted-foreground">
                        No explanation available
                      </p>
                    )}
                  </div>
                </div>
                    
              </TabsContent>
              
              <TabsContent value="remediation" className="space-y-4">
                <ScrollArea className="h-[calc(100vh-10rem)]">
                <div className="grid gap-4">
                  <div className="flex flex-col gap-2">
                    <Label className="font-semibold">Remediation Description</Label>
                    <p className="text-muted-foreground">Remediation description will be fetched from API.</p>
                  </div>
                  
                  <div className="flex flex-col gap-2">
                    <Label className="font-semibold">Remediation Steps</Label>
                    <ol className="list-decimal list-inside space-y-1 text-muted-foreground">
                      <li>Step 1: Fetch remediation steps from API.</li>
                      <li>Step 2: Display steps.</li>
                    </ol>
                  </div>
                  
                  <Separator />
                  
                  <div className="flex flex-col gap-4">
                    <div className="flex flex-col gap-2">
                      <Label className="font-semibold">Generate WAF Rule</Label>
                      <p className="text-sm text-muted-foreground">
                        Generate a WAF rule to help mitigate this vulnerability
                      </p>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4 w-fit">
                      <div className="flex flex-col gap-2">
                        <Label>WAF Type</Label>
                        <Select value={wafType} onValueChange={setWafType}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="azure">Azure WAF</SelectItem>
                            <SelectItem value="aws">AWS WAF</SelectItem>
                            <SelectItem value="gcp">GCP Cloud Armor</SelectItem>
                            <SelectItem value="cloudflare">Cloudflare</SelectItem>
                            <SelectItem value="akamai">Akamai</SelectItem>
                            <SelectItem value="imperva">Imperva</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div className="flex flex-col gap-2">
                        <Label>Rule Format</Label>
                        <Select value={ruleFormat} onValueChange={setRuleFormat}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="json">JSON</SelectItem>
                            <SelectItem value="curl">cURL</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    
                                         <Button 
                       onClick={handleGenerateWafRule} 
                       className="w-fit cursor-pointer"
                       disabled={wafRuleLoading}
                     >
                       {wafRuleLoading ? (
                         <>
                           <div className="h-4 w-4 animate-spin rounded-full border-2 border-stone-300 border-t-stone-600 mr-2"></div>
                           Generating...
                         </>
                       ) : (
                         "Generate WAF Rule"
                       )}
                     </Button>
                     
                     {showGeneratedRule && (
                       <div className="flex flex-col gap-2">
                         <div className="flex items-center justify-between">
                           <Label className="font-semibold">Generated Rule</Label>
                           <Button
                             variant="outline"
                             size="sm"
                             onClick={handleCopyToClipboard}
                             className="h-8 w-8 p-0 cursor-pointer"
                           >
                             {copied ? (
                               <IconCheck className="h-4 w-4 text-green-600" />
                             ) : (
                               <IconCopy className="h-4 w-4" />
                             )}
                             <span className="sr-only">Copy to clipboard</span>
                           </Button>
                         </div>
                                                                                                       <Textarea
                             value={generatedRule}
                             readOnly
                             className="font-mono text-xs whitespace-pre-wrap break-words resize-none"
                             rows={8}
                           />
                       </div>
                     )}
                  </div>
                </div>
                </ScrollArea>
              </TabsContent>
              
              <TabsContent value="testing" className="space-y-4">
                <ScrollArea className="h-[calc(100vh-10rem)]">
                  <div className="grid gap-4">
                    <div className="flex flex-col gap-2">
                      <Label className="font-semibold">Python Testing Code Generation</Label>
                      <p className="text-sm text-muted-foreground">
                        Generate Python code to test and simulate this CVE for educational purposes.
                      </p>
                    </div>
                    
                    <Separator />
                    
                    <div className="flex flex-col gap-4">
                      <div className="flex flex-col gap-2">
                        <Label className="font-semibold">Generate Testing Code</Label>
                        <p className="text-sm text-muted-foreground">
                          Generate Python code to test and simulate this CVE
                        </p>
                      </div>
                      
                      <Button 
                        onClick={handleGenerateTestingCode} 
                        className="w-fit cursor-pointer"
                        disabled={testingCodeLoading}
                      >
                        {testingCodeLoading ? (
                          <>
                            <div className="h-4 w-4 animate-spin rounded-full border-2 border-stone-300 border-t-stone-600 mr-2"></div>
                            Generating...
                          </>
                        ) : (
                          "Generate Testing Code"
                        )}
                      </Button>
                      
                      {showGeneratedTestingCode && (
                        <div className="flex flex-col gap-2">
                          <div className="flex items-center justify-between">
                            <Label className="font-semibold">Generated Python Code</Label>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={handleCopyTestingCodeToClipboard}
                              className="h-8 w-8 p-0 cursor-pointer"
                            >
                              {testingCodeCopied ? (
                                <IconCheck className="h-4 w-4 text-green-600" />
                              ) : (
                                <IconCopy className="h-4 w-4" />
                              )}
                              <span className="sr-only">Copy to clipboard</span>
                            </Button>
                          </div>
                          <Textarea
                            value={generatedTestingCode}
                            readOnly
                            className="font-mono text-xs whitespace-pre-wrap break-words resize-none"
                            rows={12}
                          />
                        </div>
                      )}
                    </div>
                  </div>
                </ScrollArea>
              </TabsContent>
            </Tabs>
          )}
        </ScrollArea>

        <DrawerFooter>
          <DrawerClose asChild>
            <Button variant="outline" className="w-fit cursor-pointer">Close</Button>
          </DrawerClose>
        </DrawerFooter>
        
      </DrawerContent>
    </Drawer>
  )
}
